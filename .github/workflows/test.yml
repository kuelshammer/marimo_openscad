name: CI/CD Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  python-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: "3.8"
          - os: windows-latest  
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.9"

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: ðŸ”¥ CRITICAL - Cache Behavior Tests (LLM Regression Prevention)
      run: |
        echo "::group::ðŸ”¥ Critical Cache Behavior Tests"
        pytest tests/test_cache_behavior.py -v -m "not slow" --tb=short --junit-xml=cache-test-results.xml
        echo "::endgroup::"
    
    - name: ðŸŽ¯ LLM-Identified Issues Regression Tests
      run: |
        echo "::group::ðŸŽ¯ LLM Regression Tests"
        pytest tests/test_llm_identified_issues.py -v --tb=long --junit-xml=llm-test-results.xml
        echo "::endgroup::"
    
    - name: ðŸ”— Integration Tests
      run: |
        echo "::group::ðŸ”— Integration Tests"
        pytest tests/test_viewer_integration.py -v -m "not slow" --tb=short --junit-xml=integration-test-results.xml
        echo "::endgroup::"
    
    - name: ðŸ“Š All Python Tests with Coverage
      run: |
        echo "::group::ðŸ“Š Complete Python Test Suite"
        pytest tests/ --cov=marimo_openscad --cov-report=xml --cov-report=term-missing --junit-xml=python-test-results.xml
        echo "::endgroup::"
    
    - name: Upload Python Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: python-test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          *-test-results.xml
          coverage.xml
    
    - name: Comment Test Results on PR
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Python Tests (${{ matrix.os }}, Python ${{ matrix.python-version }})
        path: '*-test-results.xml'
        reporter: java-junit
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  critical-regression-tests:
    name: ðŸš¨ Critical Regression Prevention
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: ðŸš¨ CRITICAL - Prevent LLM-Identified Cache Regression
      run: |
        echo "::error title=Critical Test::Testing LLM-identified cache regression prevention"
        echo "::group::ðŸš¨ Critical Regression Tests"
        pytest tests/ -v -m "regression" --tb=long --junit-xml=regression-results.xml
        echo "::endgroup::"
        
    - name: ðŸ”¥ Cache-Specific Validation
      run: |
        echo "::group::ðŸ”¥ Cache Behavior Validation"
        pytest tests/ -v -m "cache" --tb=long --junit-xml=cache-results.xml
        echo "::endgroup::"
    
    - name: ðŸ§ª End-to-End Cache Fix Validation
      run: |
        echo "::group::ðŸ§ª Complete Cache Fix Validation"
        python test_cache_fix.py
        echo "::endgroup::"
    
    - name: Upload Critical Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: critical-regression-results
        path: |
          regression-results.xml
          cache-results.xml
    
    - name: Notify on Critical Test Failure
      if: failure()
      run: |
        echo "::error title=CRITICAL FAILURE::Cache regression tests failed - LLM-identified issue may have returned!"
        echo "::error::Check test results and verify update_scad_code functionality"

  javascript-tests:
    name: ðŸŸ¨ JavaScript Frontend Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install JavaScript dependencies
      run: |
        echo "::group::ðŸ“¦ Installing JavaScript Dependencies"
        npm install
        echo "::endgroup::"
    
    - name: ðŸŸ¨ JavaScript Widget Tests
      run: |
        echo "::group::ðŸŸ¨ JavaScript Widget Tests"
        npm run test:ci
        echo "::endgroup::"
    
    - name: ðŸ”§ JavaScript Build Validation
      run: |
        echo "::group::ðŸ”§ JavaScript Build"
        npm run build
        echo "::endgroup::"
    
    - name: Upload JavaScript Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: javascript-test-results
        path: js-test-results.xml
    
    - name: Comment JS Test Results on PR
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: JavaScript Tests
        path: 'js-test-results.xml'
        reporter: java-junit
  
  test-summary:
    name: ðŸ“‹ Test Summary & Notifications
    runs-on: ubuntu-latest
    needs: [python-tests, critical-regression-tests, javascript-tests]
    if: always()
    steps:
    - name: Check Overall Test Status
      run: |
        echo "::group::ðŸ“‹ Test Summary"
        echo "Python Tests: ${{ needs.python-tests.result }}"
        echo "Critical Regression Tests: ${{ needs.critical-regression-tests.result }}"
        echo "JavaScript Tests: ${{ needs.javascript-tests.result }}"
        echo "::endgroup::"
        
        if [[ "${{ needs.critical-regression-tests.result }}" == "failure" ]]; then
          echo "::error title=CRITICAL FAILURE::Cache regression tests failed!"
          echo "::error::The LLM-identified cache issue may have returned. Check update_scad_code functionality."
          exit 1
        fi
        
        if [[ "${{ needs.python-tests.result }}" == "failure" ]]; then
          echo "::error title=Python Backend Failure::Python backend tests failed"
        fi
        
        if [[ "${{ needs.javascript-tests.result }}" == "failure" ]]; then
          echo "::error title=JavaScript Frontend Failure::JavaScript frontend tests failed"
        fi